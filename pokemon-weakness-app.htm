<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>PokemonHub : Meta Dex</title>
<style>
  :root {
    --bg-light: #fff;
    --bg-dark: #181c23;
    --text-light: #222;
    --text-dark: #f5f5f5;
    --card-light: #fff;
    --card-dark: #232733;
    --border-light: #ccc;
    --border-dark: #3a4256;
    --accent: #3b5ba9;
    --badge-bg: #eee;
    --badge-dark: #2c3342;
  }
  body {
    font-family: Arial, sans-serif;
    margin: 1rem;
    background: var(--bg-light);
    color: var(--text-light);
    transition: background .2s, color .2s;
  }
  body.dark {
    background: var(--bg-dark);
    color: var(--text-dark);
  }
  h1 {
    text-align: center;
    margin-bottom: 1rem;
    font-size: 2rem;
    font-weight: bold;
    letter-spacing: 1px;
    line-height: 1.1;
  }
  .theme-toggle {
    position: fixed;
    top: 1rem; right: 1.5rem;
    z-index: 10;
    background: var(--accent);
    color: #fff;
    border: none;
    border-radius: 2rem;
    padding: 0.5rem 1.2rem;
    font-size: 1rem;
    cursor: pointer;
  }
  .search-container {
    max-width: 600px;
    margin: 0 auto 1rem auto;
    display: flex;
    gap: 0.5rem;
  }
  input[type="text"] {
    flex-grow: 1;
    padding: 0.5rem;
    font-size: 1rem;
    border: 1px solid var(--border-light);
    border-radius: 4px;
    background: var(--card-light);
    color: var(--text-light);
    transition: background .2s, color .2s, border .2s;
  }
  body.dark input[type="text"] {
    background: var(--card-dark);
    color: var(--text-dark);
    border: 1px solid var(--border-dark);
  }
  button {
    padding: 0.5rem 1rem;
    font-size: 1rem;
    cursor: pointer;
    border-radius: 4px;
    border: none;
    background: var(--accent);
    color: #fff;
  }
  #suggestions {
    max-width: 600px;
    margin: 0 auto;
    border: 1px solid #ccc;
    background: #fff;
    position: relative;
    z-index: 10;
  }
  body.dark #suggestions {
    background: var(--card-dark);
    color: var(--text-dark);
    border: 1px solid var(--border-dark);
  }
  #suggestions div {
    padding: 0.3rem 0.5rem;
    cursor: pointer;
  }
  #suggestions div:hover {
    background: #eee;
  }
  body.dark #suggestions div:hover {
    background: #222a38;
  }
  .card {
    max-width: 600px;
    margin: 1rem auto;
    border: 1px solid var(--border-light);
    padding: 1rem;
    background: var(--card-light);
    color: var(--text-light);
    border-radius: 8px;
    transition: background .2s, color .2s, border .2s;
  }
  body.dark .card {
    background: var(--card-dark);
    color: var(--text-dark);
    border: 1px solid var(--border-dark);
  }
  .card h2 {
    margin-top: 0;
  }
  .sprite {
    float: right;
    width: 72px;
    height: 72px;
  }
  .badge {
    display: inline-block;
    background: var(--badge-bg);
    color: #222;
    padding: 0.2rem 0.5rem;
    margin: 0.1rem 0.3rem 0.1rem 0;
    border-radius: 4px;
    font-size: 0.9rem;
  }
  body.dark .badge {
    background: var(--badge-dark);
    color: #f5f5f5;
  }
  .section {
    margin-bottom: 0.5rem;
  }
  #team-summary {
    max-width: 600px;
    margin: 2rem auto;
    border-top: 1px solid var(--border-light);
    padding-top: 1rem;
    background: var(--card-light);
    color: var(--text-light);
    border-radius: 8px;
    transition: background .2s, color .2s, border .2s;
  }
  body.dark #team-summary {
    background: var(--card-dark);
    color: var(--text-dark);
    border-top: 1px solid var(--border-dark);
  }
  #team-summary h3 {
    margin-top: 0;
  }
  ul {
    padding-left: 1.2rem;
  }
  @media (max-width: 700px) {
    .card, #team-summary, .search-container, #suggestions { max-width: 98vw; }
    .sprite { width: 56px; height: 56px; }
    h1 { font-size: 1.3rem; }
  }
</style>
</head>
<body>
<button class="theme-toggle" id="theme-toggle" aria-label="Toggle dark mode">🌙</button>
<h1>PokemonHub : Meta Dex</h1>
<div class="search-container">
  <input type="text" id="pokemon-input" placeholder="Enter up to 6 Pokémon (e.g. Charizard / Landorus-Therian)" autocomplete="off" />
  <button id="search-btn">Check</button>
  <button id="export-btn" title="Export to Showdown format">Export</button>
</div>
<div id="suggestions"></div>
<div id="result"></div>
<div id="team-summary"></div>

<script>
  // Theme toggle
  function setTheme(dark) {
    document.body.classList.toggle('dark', dark);
    document.getElementById('theme-toggle').textContent = dark ? '☀️' : '🌙';
    localStorage.setItem('theme', dark ? 'dark' : 'light');
  }
  document.getElementById('theme-toggle').onclick = () => setTheme(!document.body.classList.contains('dark'));
  (() => { setTheme(localStorage.getItem('theme') === 'dark'); })();

  // Core logic
  const apiBase = 'https://pokeapi.co/api/v2';
  const attackTypes = ['normal','fire','water','electric','grass','ice','fighting','poison','ground','flying','psychic','bug','rock','ghost','dragon','dark','steel','fairy'];
  let allPokemonNames = [];
  let lastTeam = [];

  fetch('https://pokeapi.co/api/v2/pokemon?limit=2000')
    .then(r => r.json())
    .then(data => { allPokemonNames = data.results.map(x => x.name); });

  const inputElem = document.getElementById('pokemon-input');
  const suggDiv = document.getElementById('suggestions');

  inputElem.addEventListener('input', () => {
    const input = inputElem.value.split('/').pop().trim().toLowerCase();
    if (!input) { suggDiv.innerHTML = ''; return; }
    const matches = allPokemonNames.filter(n => n.startsWith(input)).slice(0, 5);
    if (!matches.length) { suggDiv.innerHTML = ''; return; }
    suggDiv.innerHTML = matches.map(name => `<div>${name}</div>`).join('');
  });

  suggDiv.addEventListener('click', e => {
    if (e.target.tagName !== 'DIV') return;
    const name = e.target.textContent;
    let parts = inputElem.value.split('/');
    parts[parts.length - 1] = ' ' + name;
    inputElem.value = parts.join('/').replace(/^ +/, '');
    suggDiv.innerHTML = '';
    inputElem.focus();
  });

  document.body.addEventListener('click', e => {
    if (!e.target.closest('.search-container')) suggDiv.innerHTML = '';
  });

  const ouSets = {
    "charizard": {
      moves: ["Fire Blast", "Hurricane", "Solar Beam", "Roost"],
      item: "Heavy-Duty Boots",
      ability: "Solar Power"
    },
    "landorus-therian": {
      moves: ["Earthquake", "Stealth Rock", "U-turn", "Knock Off"],
      item: "Leftovers",
      ability: "Intimidate"
    },
    "iron-valiant": {
      moves: ["Moonblast", "Close Combat", "Knock Off", "Encore"],
      item: "Booster Energy",
      ability: "Quark Drive"
    }
  };

  document.getElementById('search-btn').onclick = handleSearch;
  inputElem.addEventListener('keydown', e => { if (e.key === 'Enter') handleSearch(); });
  document.getElementById('export-btn').onclick = exportShowdown;

  async function handleSearch() {
    const raw = inputElem.value.trim();
    if (!raw) return;
    const names = raw.split('/').map(s => s.trim()).filter(Boolean);
    if (!names.length) return;
    if (names.length > 6) {
      alert('Please enter no more than 6 Pokémon.');
      return;
    }
    document.getElementById('result').textContent = 'Loading…';
    try {
      const dataArr = await Promise.all(names.map(getPokemonData));
      lastTeam = dataArr;
      document.getElementById('result').innerHTML = dataArr.map(renderCard).join('');
      renderTeamSummary(dataArr);
    } catch (err) {
      alert('Error fetching Pokémon data.');
      document.getElementById('result').textContent = '';
      document.getElementById('team-summary').innerHTML = '';
    }
  }

  async function getPokemonData(rawName) {
    const name = rawName.toLowerCase().replace(/['.]/g, '').replace(/\s+/g, '-').trim();
    try {
      const res = await fetch(`${apiBase}/pokemon/${name}`);
      if (!res.ok) throw new Error();
      const p = await res.json();
      const typeInfo = await Promise.all(p.types.map(t => fetch(t.type.url).then(r => r.json())));
      const mult = Object.fromEntries(attackTypes.map(t => [t, 1]));
      typeInfo.forEach(t => {
        t.damage_relations.double_damage_from.forEach(d => mult[d.name] *= 2);
        t.damage_relations.half_damage_from.forEach(d => mult[d.name] *= 0.5);
        t.damage_relations.no_damage_from.forEach(d => mult[d.name] = 0);
      });
      const moves = p.moves.filter(m =>
        m.version_group_details.some(vgd => vgd.move_learn_method.name === "level-up")
      ).map(m => m.move.name.replace(/-/g, ' '));
      return {
        name: p.name,
        sprite: p.sprites.front_default || p.sprites.other['official-artwork'].front_default,
        weaknesses: attackTypes.filter(t => mult[t] > 1),
        resistances: attackTypes.filter(t => mult[t] < 1 && mult[t] > 0),
        immunities: attackTypes.filter(t => mult[t] === 0),
        moves,
        stats: Object.fromEntries(p.stats.map(s => [s.stat.name, s.base_stat]))
      };
    } catch {
      return { error: true, name: rawName };
    }
  }

  function renderCard(d) {
    if (d.error) return `<div class="card"><h2>${d.name}</h2><p>Pokémon not found</p></div>`;
    const set = ouSets[d.name.toLowerCase()] || null;
    const moves = set ? set.moves : (d.moves && d.moves.length ? d.moves.slice(0, 4) : []);
    const item = set ? set.item : '-';
    const ability = set ? set.ability : '-';
    return `<div class="card">
      <h2>${capitalize(d.name)}</h2>
      <img src="${d.sprite}" alt="${d.name}" class="sprite" />
      <div class="section"><strong>Weak to ×2:</strong> ${d.weaknesses.map(t => `<span class="badge">${capitalize(t)}</span>`).join(' ')}</div>
      <div class="section"><strong>Resists ×½:</strong> ${d.resistances.map(t => `<span class="badge">${capitalize(t)}</span>`).join(' ')}</div>
      <div class="section"><strong>Immune ×0:</strong> ${d.immunities.map(t => `<span class="badge">${capitalize(t)}</span>`).join(' ')}</div>
      <div class="section"><strong>Item:</strong> ${item}</div>
      <div class="section"><strong>Ability:</strong> ${ability}</div>
      <div class="section"><strong>Most Used OU Moves:</strong> ${moves.map(m => `<span class="badge">${m}</span>`).join(' ')}</div>
    </div>`;
  }

  function renderTeamSummary(arr) {
    if (!arr.length) {
      document.getElementById('team-summary').innerHTML = '';
      return;
    }
    const summaryDiv = document.getElementById('team-summary');
    const countsWeak = {}, countsResist = {}, countsImmune = {};
    attackTypes.forEach(t => { countsWeak[t] = 0; countsResist[t] = 0; countsImmune[t] = 0; });
    let totalStats = { hp:0, attack:0, defense:0, 'special-attack':0, 'special-defense':0, speed:0, n:0 };
    let hasRocks = false, hasDefog = false, hasSpin = false, hasPriority = false, hasSpeed = false, hasGroundImmune = false;
    let hazardSetters = [], hazardRemovers = [], speedsters = [], priorityUsers = [];
    arr.forEach(p => {
      if (p.error) return;
      p.weaknesses.forEach(t => countsWeak[t]++);
      p.resistances.forEach(t => countsResist[t]++);
      p.immunities.forEach(t => countsImmune[t]++);
      if (p.stats) {
        totalStats.hp += p.stats.hp;
        totalStats.attack += p.stats.attack;
        totalStats.defense += p.stats.defense;
        totalStats['special-attack'] += p.stats['special-attack'];
        totalStats['special-defense'] += p.stats['special-defense'];
        totalStats.speed += p.stats.speed;
        totalStats.n++;
      }
      const set = ouSets[p.name?.toLowerCase()];
      const moves = set ? set.moves : (p.moves || []);
      if (moves.some(m => m.toLowerCase().includes("stealth rock"))) { hasRocks = true; hazardSetters.push(p.name);}
      if (moves.some(m => ["defog", "rapid spin"].includes(m.toLowerCase()))) {
        hasDefog = moves.some(m=>m.toLowerCase()==="defog") || hasDefog;
        hasSpin = moves.some(m=>m.toLowerCase()==="rapid spin") || hasSpin;
        hazardRemovers.push(p.name);
      }
      if (moves.some(m => ["ice shard","sucker punch","aqua jet","shadow sneak","bullet punch","extreme speed"].includes(m.toLowerCase()))) {
        hasPriority = true; priorityUsers.push(p.name);
      }
      if (p.stats && p.stats.speed >= 100) { hasSpeed = true; speedsters.push(p.name);}
      if (p.resistances && p.resistances.includes("ground")) hasGroundImmune = true;
      if (p.immunities && p.immunities.includes("ground")) hasGroundImmune = true;
    });
    let pros = [], cons = [];
    // Defensive synergy
    const noWeak = attackTypes.filter(type => countsWeak[type] === 0);
    if (noWeak.length) pros.push(`No weaknesses to: ${noWeak.map(capitalize).join(', ')}`);
    const strongResists = attackTypes.filter(type => countsResist[type] >= 2);
    if (strongResists.length) pros.push(`Multiple team members resist: ${strongResists.map(capitalize).join(', ')}`);
    const immunities = attackTypes.filter(type => countsImmune[type] > 0);
    if (immunities.length) pros.push(`Has immunities to: ${immunities.map(capitalize).join(', ')}`);
    // Weaknesses
    const overExposed = attackTypes.filter(type => countsWeak[type] > 2);
    if (overExposed.length) cons.push(`More than 2 Pokémon are weak to: ${overExposed.map(capitalize).join(', ')}`);
    const noResist = attackTypes.filter(type => countsResist[type] === 0);
    if (noResist.length) cons.push(`No team members resist: ${noResist.map(capitalize).join(', ')}`);
    // Stats
    if (totalStats.n) {
      const avg = s => Math.round(totalStats[s] / totalStats.n);
      if (avg('speed') < 70) cons.push("Team is slow (average Speed below 70)");
      if (avg('defense') < 70 || avg('special-defense') < 70) cons.push("Team has low average defenses");
      if (avg('attack') > 100 || avg('special-attack') > 100) pros.push("Team has strong offensive stats");
    }
    // Synergy/threat checks
    if (!hasRocks) cons.push("No Stealth Rock setter");
    if (!hasDefog && !hasSpin) cons.push("No hazard removal (Defog or Rapid Spin)");
    if (!hasPriority) cons.push("No priority move user");
    if (!hasSpeed) cons.push("No Pokémon with base Speed 100+");
    if (!hasGroundImmune) cons.push("No Ground immunity (Flying/Levitate)");
    if (hasRocks) pros.push(`Has Stealth Rock: ${hazardSetters.join(', ')}`);
    if (hasDefog || hasSpin) pros.push(`Has hazard removal: ${hazardRemovers.join(', ')}`);
    if (hasPriority) pros.push(`Has priority moves: ${priorityUsers.join(', ')}`);
    if (hasSpeed) pros.push(`Has fast Pokémon: ${speedsters.join(', ')}`);
    if (pros.length === 0) pros.push("No major defensive synergy detected.");
    if (cons.length === 0) cons.push("No major weaknesses detected.");
    summaryDiv.innerHTML = `<h3>Team Pros</h3>
      <ul>${pros.map(p => `<li>${p}</li>`).join('')}</ul>
      <h3>Team Cons</h3>
      <ul>${cons.map(c => `<li>${c}</li>`).join('')}</ul>`;
  }

  function capitalize(str) { return str.charAt(0).toUpperCase() + str.slice(1); }

  function exportShowdown() {
    if (!lastTeam.length) return alert("Build a team first!");
    let text = lastTeam.filter(p => !p.error).map(p => {
      const set = ouSets[p.name.toLowerCase()] || {};
      let moves = set.moves || (p.moves ? p.moves.slice(0, 4) : []);
      return `${capitalize(p.name)} @ ${set.item || '-'}\nAbility: ${set.ability || '-'}\nEVs: 252 Atk / 4 SpD / 252 Spe\n${moves.map(m => `- ${m}`).join('\n')}`;
    }).join('\n\n');
    navigator.clipboard.writeText(text).then(() => alert("Team exported to clipboard in Showdown format!"));
  }
</script>
</body>
</html>
